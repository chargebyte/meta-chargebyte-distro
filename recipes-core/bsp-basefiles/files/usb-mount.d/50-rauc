#!/bin/sh

ACTION="$1"
MOUNTPOINT="$2"

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

if [ "$ACTION" = "add" ]; then
	# obtain current platform info
	eval $(rauc status --output-format=shell 2>/dev/null)

	# if we are running a system which was updated with rauc, we
	# can obtain sha256 sums from slot status files
	ROOTFS_DIGEST=$(awk -F "=" ' /^sha256/ {print $2}' /slot.raucs 2>/dev/null)
	CUSTOMERFS_DIGEST=$(awk -F "=" ' /^sha256/ {print $2}' /var/log/slot.raucs 2>/dev/null)

	for BUNDLE in "$MOUNTPOINT"/*.image; do
		# nullglob not available in every shell, so check for empty match
		[ -e "$BUNDLE" ] || continue

		echo "considering '$BUNDLE'" | logger -t usb-mount-rauc

		# obtain image info
		eval $(rauc info --no-verify --output-format=shell "$BUNDLE" 2>/dev/null)

		# if it does not match our current platform, we ignore it
		if [ "$RAUC_SYSTEM_COMPATIBLE" != "$RAUC_MF_COMPATIBLE" ]; then
			echo "not compatible: '$RAUC_SYSTEM_COMPATIBLE' vs. '$RAUC_MF_COMPATIBLE'" | logger -t usb-mount-rauc
			continue
		fi

		# loop through images in the bundle and determine whether it looks like this
		# is the bundle we are already running from
		RAUC_rootfs_DIGEST=""
		RAUC_customerfs_DIGEST=""
		for y in $(seq 0 $((RAUC_MF_IMAGES - 1))); do
			eval RAUC_IMAGE_CLASS=\$RAUC_IMAGE_CLASS_${y}
			eval RAUC_${RAUC_IMAGE_CLASS}_DIGEST=\$RAUC_IMAGE_DIGEST_${y}
		done

		if [ "$ROOTFS_DIGEST" = "$RAUC_rootfs_DIGEST" -a "$CUSTOMERFS_DIGEST" = "$RAUC_customerfs_DIGEST" ]; then
			# seems that this update was already processed in previous run, so skip it
			echo "already installed" | logger -t usb-mount-rauc
			continue
		fi

		# try to install it and reboot on success
		echo "trying to install" | logger -t usb-mount-rauc
		rauc install "$BUNDLE" && reboot
	done
fi
